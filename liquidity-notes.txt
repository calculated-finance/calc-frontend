- Every asset has a set of pools that you can generate yield on
  - aka provide liquidity to that pool, using that asset
  - We need to look up the pool list and get the pools for that asset
  - get all pools, look up dictionary, find pools for denom
  - get APR, duration etc
  - might need to be a "weighted" pool, to be confirmed

- That returns you LP tokens
  - acculumate value over time by taking portion of swaps fees in that pool
  - we provide liquidity on behalf of them, straight from swap to LP
  - take the LP tokens and send them to the user, every swap
  - Use AuthZ to bond the LP tokens on behalf

- Redeeming these tokens means getting the profits because the tokens have increased in value
  - LP tokens minted based on the % of your contribution
  - maintains value because redeeming burns these tokens

- Then you can "bond" those LP tokens
  - in order to receieve "incentive rewards"
  - locking them up, maintains liquidity

- "super fluid staking" potentially to come
  - restakes/rebonds rewards
  - select a validator for that (potentially a field for yield gen form)
  - auto compounds

- Need to add AuthZ grant for yield generation option
  - specific message type
  - Grant for contract address, but might change to seperate staking router address
  - msg = '/osmosis.lockup.MsgLockTokens' (different if we enforce super fluid staking)

- Determining APR
  - Look at osmosis frontend code for this logic
  - made up of:
    - APR on the LP tokens (directly related to swap fees)
    - Incentives for bonded LP tokens
      - extra reason to provide liquidity to that pool
      - 1 day rewards = 1 day
      - 7 day rewards = 7 day + 1 day
    - super fluid staking APR (maybe)
      - even more APR with the compounding approach
      - validators get a cut of the rewards
      - different grant message 




- Need to show LP stuff on the details page for the asset
  - Duration
  - validator
  - could show APR?


  https://github.com/osmosis-labs/osmosis-frontend/blob/f4bc6a93f7ffa51536ea837bb0158ed4f8112db2/packages/web/pages/pool/%5Bid%5D.tsx#L652



  https://github.com/osmosis-labs/osmosis-frontend/blob/d231d20f1d9b87618c74293d235be0b5c869716c/packages/stores/src/queries-external/pool-fees/index.ts#L77
    readonly get7dPoolFeeApr = computedFn(
    (pool: ObservableQueryPool, priceStore: IPriceStore): RatePretty => {
      const { feesSpent7d } = this.getPoolFeesMetrics(pool.id, priceStore);
      const avgDayFeeRevenue = new Dec(feesSpent7d.toDec().toString(), 6).quo(
        new Dec(7)
      );
      const poolTVL = pool.computeTotalValueLocked(priceStore).toDec();
      const revenuePerYear = avgDayFeeRevenue.mul(new Dec(365));

      if (poolTVL.equals(new Dec(0)) || revenuePerYear.equals(new Dec(0)))
        return new RatePretty(0);

      return new RatePretty(revenuePerYear.quo(poolTVL));
    }
  );


computeApr