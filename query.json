{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "type": "object",
      "required": ["get_pairs"],
      "properties": {
        "get_pairs": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": ["get_time_trigger_ids"],
      "properties": {
        "get_time_trigger_ids": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": ["get_trigger_id_by_fin_limit_order_idx"],
      "properties": {
        "get_trigger_id_by_fin_limit_order_idx": {
          "type": "object",
          "required": ["order_idx"],
          "properties": {
            "order_idx": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": ["get_vault"],
      "properties": {
        "get_vault": {
          "type": "object",
          "required": ["address", "vault_id"],
          "properties": {
            "address": {
              "type": "string"
            },
            "vault_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": ["get_vaults_by_address"],
      "properties": {
        "get_vaults_by_address": {
          "type": "object",
          "required": ["address"],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": ["get_events_by_resource_id"],
      "properties": {
        "get_events_by_resource_id": {
          "type": "object",
          "required": ["resource_id"],
          "properties": {
            "resource_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": ["get_events"],
      "properties": {
        "get_events": {
          "type": "object",
          "properties": {
            "limit": {
              "type": ["integer", "null"],
              "format": "uint8",
              "minimum": 0.0
            },
            "start_after": {
              "type": ["integer", "null"],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
